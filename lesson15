# Задача 64: Задайте значения M и N. Напишите программу, которая выведет все натуральные числа в промежутке от M до N.
# M = 1; N = 5. -> ""1, 2, 3, 4, 5""
# M = 4; N = 8. -> ""4, 6, 7, 8""

using System;

class Program
{
    static void Main()
    {
        Console.Write("Введите значение M: ");
        int m = Convert.ToInt32(Console.ReadLine());

        Console.Write("Введите значение N: ");
        int n = Convert.ToInt32(Console.ReadLine());

        if (m <= n)
        {
            Console.Write("Натуральные числа в промежутке от M до N: ");
            for (int i = m; i <= n; i++)
            {
                Console.Write(i);
                if (i < n)
                {
                    Console.Write(", ");
                }
            }
            Console.WriteLine();
        }
        else
        {
            Console.WriteLine("M должно быть меньше или равно N.");
        }
    }
}


# Задача 66: Задайте значения M и N. Напишите программу, которая найдёт сумму натуральных элементов в промежутке от M до N.
# M = 1; N = 15 -> 120
# M = 4; N = 8. -> 30
using System;

class Program
{
    static void Main()
    {
        Console.Write("Введите значение M: ");
        int m = Convert.ToInt32(Console.ReadLine());

        Console.Write("Введите значение N: ");
        int n = Convert.ToInt32(Console.ReadLine());

        if (m <= n)
        {
            int sum = 0;
            for (int i = m; i <= n; i++)
            {
                sum += i;
            }

            Console.WriteLine($"Сумма натуральных чисел в промежутке от {m} до {n}: {sum}");
        }
        else
        {
            Console.WriteLine("M должно быть меньше или равно N.");
        }
    }
}

# Задача 68: Напишите программу вычисления функции Аккермана с помощью рекурсии. Даны два неотрицательных числа m и n.
# m = 2, n = 3 -> A(m,n) = 29
using System;

class Program
{
    static int Ackermann(int m, int n)
    {
        if (m == 0)
            return n + 1;
        else if (m > 0 && n == 0)
            return Ackermann(m - 1, 1);
        else if (m > 0 && n > 0)
            return Ackermann(m - 1, Ackermann(m, n - 1));
        else
            return 0; // Для отрицательных значений функция Аккермана не определена
    }

    static void Main()
    {
        int m = 2;
        int n = 3;

        int result = Ackermann(m, n);
        Console.WriteLine($"A({m}, {n}) = {result}");
    }
}
